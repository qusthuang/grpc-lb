// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto2

import (
	context "context"
	//proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
//const _ = proto.ProtoPackageIsVersion3

const _ = grpc.SupportPackageIsVersion4
// SoaInvokerServiceClient is the client API for SoaInvokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoaInvokerServiceClient interface {
	Call(ctx context.Context, in *SoaInvokerRequest, opts ...grpc.CallOption) (*SoaInvokerResponse, error)
	Ping(ctx context.Context, in *SoaHealthCheckRequest, opts ...grpc.CallOption) (*SoaHealthCheckResponse, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (SoaInvokerService_StreamClient, error)
}

type soaInvokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoaInvokerServiceClient(cc grpc.ClientConnInterface) SoaInvokerServiceClient {
	return &soaInvokerServiceClient{cc}
}

func (c *soaInvokerServiceClient) Call(ctx context.Context, in *SoaInvokerRequest, opts ...grpc.CallOption) (*SoaInvokerResponse, error) {
	out := new(SoaInvokerResponse)
	err := c.cc.Invoke(ctx, "/proto2.SoaInvokerService/call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soaInvokerServiceClient) Ping(ctx context.Context, in *SoaHealthCheckRequest, opts ...grpc.CallOption) (*SoaHealthCheckResponse, error) {
	out := new(SoaHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/proto2.SoaInvokerService/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soaInvokerServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (SoaInvokerService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SoaInvokerService_ServiceDesc.Streams[0], "/proto2.SoaInvokerService/stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &soaInvokerServiceStreamClient{stream}
	return x, nil
}

type SoaInvokerService_StreamClient interface {
	Send(*SoaInvokerRequest) error
	Recv() (*SoaInvokerResponse, error)
	grpc.ClientStream
}

type soaInvokerServiceStreamClient struct {
	grpc.ClientStream
}

func (x *soaInvokerServiceStreamClient) Send(m *SoaInvokerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *soaInvokerServiceStreamClient) Recv() (*SoaInvokerResponse, error) {
	m := new(SoaInvokerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}



// SoaInvokerServiceServer is the server API for SoaInvokerService service.
// All implementations must embed UnimplementedSoaInvokerServiceServer
// for forward compatibility
type SoaInvokerServiceServer interface {
	Call(context.Context, *SoaInvokerRequest) (*SoaInvokerResponse, error)
	Ping(context.Context, *SoaHealthCheckRequest) (*SoaHealthCheckResponse, error)
	Stream(SoaInvokerService_StreamServer) error
	mustEmbedUnimplementedSoaInvokerServiceServer()
}

// UnimplementedSoaInvokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoaInvokerServiceServer struct {
}

func (UnimplementedSoaInvokerServiceServer) Call(context.Context, *SoaInvokerRequest) (*SoaInvokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedSoaInvokerServiceServer) Ping(context.Context, *SoaHealthCheckRequest) (*SoaHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSoaInvokerServiceServer) Stream(SoaInvokerService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedSoaInvokerServiceServer) mustEmbedUnimplementedSoaInvokerServiceServer() {}

// UnsafeSoaInvokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoaInvokerServiceServer will
// result in compilation errors.
type UnsafeSoaInvokerServiceServer interface {
	mustEmbedUnimplementedSoaInvokerServiceServer()
}

func RegisterSoaInvokerServiceServer(s grpc.Server, srv SoaInvokerServiceServer) {
	s.RegisterService(&SoaInvokerService_ServiceDesc, srv)
}

func _SoaInvokerService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoaInvokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoaInvokerServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.SoaInvokerService/call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoaInvokerServiceServer).Call(ctx, req.(*SoaInvokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoaInvokerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoaHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoaInvokerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.SoaInvokerService/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoaInvokerServiceServer).Ping(ctx, req.(*SoaHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoaInvokerService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SoaInvokerServiceServer).Stream(&soaInvokerServiceStreamServer{stream})
}

type SoaInvokerService_StreamServer interface {
	Send(*SoaInvokerResponse) error
	Recv() (*SoaInvokerRequest, error)
	grpc.ServerStream
}

type soaInvokerServiceStreamServer struct {
	grpc.ServerStream
}

func (x *soaInvokerServiceStreamServer) Send(m *SoaInvokerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *soaInvokerServiceStreamServer) Recv() (*SoaInvokerRequest, error) {
	m := new(SoaInvokerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SoaInvokerService_ServiceDesc is the grpc.ServiceDesc for SoaInvokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoaInvokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.SoaInvokerService",
	HandlerType: (*SoaInvokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "call",
			Handler:    _SoaInvokerService_Call_Handler,
		},
		{
			MethodName: "ping",
			Handler:    _SoaInvokerService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream",
			Handler:       _SoaInvokerService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "soa_invoke.proto",
}
